{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10647616\\\\Downloads\\\\time_entry\\\\time_entry\\\\frontend\\\\src\\\\core\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = tempDate => {\n  _s();\n\n  const [time, setTime] = useState(0);\n\n  const hourCheck = tempDate => {\n    const dateAdded = moment(tempDate).toISOString();\n    const now = moment().toISOString();\n    const ms = moment(now).diff(moment(dateAdded));\n    const d = moment.duration(ms);\n    const hours = Math.floor(d.asHours()) + moment.utc(ms).format(\":mm:ss\");\n    return hours;\n  }; // const showTime = () => {\n  //     let time = new Date();\n  //     let hour = time.getHours();\n  //     let min = time.getMinutes();\n  //     let sec = time.getSeconds();\n  //     let am_pm = \"AM\";\n  //     if (hour > 12) {\n  //         hour -= 12;\n  //         am_pm = \"PM\";\n  //     }\n  //     if (hour == 0) {\n  //         hour = 12;\n  //         am_pm = \"AM\";\n  //     }\n  //     hour = hour < 10 ? \"0\" + hour : hour;\n  //     min = min < 10 ? \"0\" + min : min;\n  //     sec = sec < 10 ? \"0\" + sec : sec;\n  //     let currentTime = hour + \":\" + min + \":\" + sec + am_pm;\n  //     return currentTime;\n  // }\n\n\n  useEffect(() => {\n    const tempDate = \"2021-04-17T10:20:47.817Z\";\n    const interval = setInterval(() => setTime(hourCheck(tempDate)), 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" Last updated \", time, \" hrs ago. \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Timer, \"5hWQWrdOaoNaY+yZN4rUVWF/ZFM=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/10647616/Downloads/time_entry/time_entry/frontend/src/core/Timer.js"],"names":["useEffect","useState","moment","Timer","tempDate","time","setTime","hourCheck","dateAdded","toISOString","now","ms","diff","d","duration","hours","Math","floor","asHours","utc","format","interval","setInterval","clearInterval"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;AAEA,MAAMC,KAAK,GAAIC,QAAD,IAAc;AAAA;;AAExB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAD,CAAhC;;AAEA,QAAMM,SAAS,GAAIH,QAAD,IAAc;AAC5B,UAAMI,SAAS,GAAGN,MAAM,CAACE,QAAD,CAAN,CAAiBK,WAAjB,EAAlB;AACA,UAAMC,GAAG,GAAGR,MAAM,GAAGO,WAAT,EAAZ;AACA,UAAME,EAAE,GAAGT,MAAM,CAACQ,GAAD,CAAN,CAAYE,IAAZ,CAAiBV,MAAM,CAACM,SAAD,CAAvB,CAAX;AACA,UAAMK,CAAC,GAAGX,MAAM,CAACY,QAAP,CAAgBH,EAAhB,CAAV;AACA,UAAMI,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACK,OAAF,EAAX,IAA0BhB,MAAM,CAACiB,GAAP,CAAWR,EAAX,EAAeS,MAAf,CAAsB,QAAtB,CAAxC;AACA,WAAOL,KAAP;AACH,GAPD,CAJwB,CAaxB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMI,QAAQ,GAAG,0BAAjB;AACA,UAAMiB,QAAQ,GAAGC,WAAW,CAAC,MAAMhB,OAAO,CAACC,SAAS,CAACH,QAAD,CAAV,CAAd,EAAqC,IAArC,CAA5B;AACA,WAAO,MAAM;AACTmB,MAAAA,aAAa,CAACF,QAAD,CAAb;AACH,KAFD;AAGH,GANQ,EAMN,EANM,CAAT;AAQA,sBACI;AAAA,2BACI;AAAA,mCAAmBhB,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAnDD;;GAAMF,K;;KAAAA,K;AAqDN,eAAeA,KAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport moment from 'moment'\r\n\r\nconst Timer = (tempDate) => {\r\n\r\n    const [time, setTime] = useState(0);\r\n\r\n    const hourCheck = (tempDate) => {\r\n        const dateAdded = moment(tempDate).toISOString();\r\n        const now = moment().toISOString();\r\n        const ms = moment(now).diff(moment(dateAdded));\r\n        const d = moment.duration(ms);\r\n        const hours = Math.floor(d.asHours()) + moment.utc(ms).format(\":mm:ss\");\r\n        return hours;\r\n    }\r\n\r\n    // const showTime = () => {\r\n    //     let time = new Date();\r\n    //     let hour = time.getHours();\r\n    //     let min = time.getMinutes();\r\n    //     let sec = time.getSeconds();\r\n    //     let am_pm = \"AM\";\r\n\r\n    //     if (hour > 12) {\r\n    //         hour -= 12;\r\n    //         am_pm = \"PM\";\r\n    //     }\r\n    //     if (hour == 0) {\r\n    //         hour = 12;\r\n    //         am_pm = \"AM\";\r\n    //     }\r\n\r\n    //     hour = hour < 10 ? \"0\" + hour : hour;\r\n    //     min = min < 10 ? \"0\" + min : min;\r\n    //     sec = sec < 10 ? \"0\" + sec : sec;\r\n\r\n    //     let currentTime = hour + \":\" + min + \":\" + sec + am_pm;\r\n\r\n    //     return currentTime;\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const tempDate = \"2021-04-17T10:20:47.817Z\"\r\n        const interval = setInterval(() => setTime(hourCheck(tempDate)), 1000);\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1> Last updated {time} hrs ago. </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;"]},"metadata":{},"sourceType":"module"}